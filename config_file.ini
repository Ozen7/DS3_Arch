# This file contains all the file names and variables to initialize the DASH_SIM

[DEFAULT]
# Configuration file that contains available resources in DASH-SoC
#resource_file = SoC.BAL_only.txt
resource_file = SoC.MULTIPLE_BAL.txt

# Configuration files for applications
# To feed multiple applications, please separate the file names with a comma
# (do not include a space between file names) and be sure that resource file
# has all information about the tasks from all task graphs
job_file = job_WIFI_5TXM.txt,job_WIFI_5RXM.txt,job_LAG.txt,job_SCT.txt,job_SCR.txt,job_TEMP_MIT.txt

### Workload Generation ###
# You have two option to generate a workload
# 1-) Provide probabilities for appliactions defined in job_file
#     In this case, jobs will be created based on the probabilities
#     For example, assume a workload is based on two applications and probabilities are [0.5,0.5]
#     Then, total number of jobs generated will be equally divided between two applications
# 2-) Generate a specific workload by manually creating snippets composed of predetermined number of jobs

# Probability of each app for being selected as the new job
job_probabilities = [0.2,0.2,0.2,0.1,0.1,0.2]

# Define a list (snippet) with the number of jobs to be executed per application
# <WiFi TX, WiFi RX, Range, SCT, SCR>
# This configuration is expected to match the order of the MERGE_LIST variable in the common.py file.
# Use [] to disable this config
# For multiple snippets, define a list of lists
job_list = []
# --- Five-app job_list ---
#job_list = [[2, 4, 1, 1, 2], [2, 4, 3, 0, 1], [1, 4, 0, 2, 3], [1, 0, 6, 0, 3], [3, 4, 0, 0, 3], [1, 1, 3, 5, 0], [6, 2, 0, 1, 1], [3, 0, 0, 4, 3], [3, 1, 5, 0, 1], [1, 3, 5, 0, 1], [4, 0, 0, 2, 4], [0, 1, 7, 1, 1], [4, 4, 0, 1, 1], [2, 0, 0, 1, 7], [1, 0, 0, 1, 8], [6, 0, 0, 3, 1], [0, 0, 0, 7, 3], [3, 0, 0, 7, 0], [1, 4, 0, 1, 4], [2, 5, 0, 2, 1], [2, 0, 0, 7, 1], [5, 1, 4, 0, 0], [0, 3, 5, 1, 1], [1, 4, 4, 1, 0], [0, 2, 0, 7, 1], [3, 1, 1, 0, 5], [1, 6, 0, 1, 2], [3, 3, 2, 1, 1], [2, 0, 5, 1, 2], [1, 4, 0, 5, 0], [0, 7, 1, 2, 0], [1, 0, 2, 2, 5], [0, 0, 6, 2, 2], [0, 0, 1, 0, 9], [6, 2, 0, 0, 2], [1, 4, 3, 0, 2], [0, 8, 1, 1, 0], [0, 1, 1, 7, 1], [0, 2, 0, 1, 7], [0, 1, 1, 6, 2], [3, 1, 0, 2, 4], [1, 1, 1, 6, 1], [3, 1, 4, 0, 2], [3, 0, 4, 2, 1], [2, 1, 1, 5, 1], [3, 0, 0, 6, 1], [2, 4, 1, 0, 3], [1, 4, 2, 3, 0], [3, 2, 1, 4, 0], [3, 4, 1, 1, 1]]
# --- Six-app job list ---
#job_list = [[5, 1, 1, 0, 2, 1], [2, 0, 0, 2, 6, 0], [0, 0, 2, 0, 0, 8], [0, 1, 5, 3, 1, 0], [0, 2, 1, 3, 1, 3], [0, 2, 3, 4, 1, 0], [1, 2, 0, 0, 4, 3], [0, 1, 1, 1, 2, 5], [3, 0, 3, 2, 0, 2], [3, 0, 4, 0, 1, 2], [0, 6, 0, 4, 0, 0], [2, 2, 3, 2, 1, 0], [7, 0, 0, 1, 1, 1], [2, 5, 0, 3, 0, 0], [0, 4, 0, 0, 1, 5], [0, 3, 3, 0, 1, 3], [2, 2, 2, 0, 2, 2], [1, 1, 3, 3, 1, 1], [0, 5, 1, 0, 2, 2], [1, 4, 0, 0, 4, 1], [0, 2, 4, 0, 0, 4], [1, 3, 2, 0, 0, 4], [1, 0, 2, 3, 0, 4], [2, 1, 0, 2, 4, 1], [0, 1, 0, 1, 6, 2], [0, 3, 3, 0, 2, 2], [0, 2, 0, 0, 2, 6], [0, 0, 0, 1, 4, 5], [7, 2, 0, 1, 0, 0], [1, 2, 1, 1, 2, 3], [0, 5, 1, 1, 2, 1], [3, 3, 0, 0, 2, 2], [0, 5, 0, 0, 3, 2], [0, 3, 0, 5, 2, 0], [2, 4, 1, 1, 1, 1], [1, 1, 0, 5, 1, 2], [5, 0, 1, 0, 1, 3], [1, 0, 0, 3, 4, 2], [1, 3, 0, 0, 3, 3], [0, 2, 7, 0, 1, 0], [0, 3, 1, 5, 0, 1], [2, 5, 0, 2, 1, 0], [0, 6, 0, 0, 4, 0], [1, 1, 2, 1, 0, 5], [1, 0, 0, 1, 5, 3], [1, 3, 1, 1, 1, 3], [1, 1, 2, 0, 3, 3], [1, 3, 4, 2, 0, 0], [8, 2, 0, 0, 0, 0], [0, 4, 0, 0, 6, 0]]

# If job_list is enabled, a fixed number of jobs will be injected. inject_fixed_num_jobs, max_jobs, and simulation_length are not used as the total number of jobs is automatically obtained from the job_list.
# Executes a pre-defined number of jobs
inject_fixed_num_jobs = yes
# If inject_fixed_num_jobs is enabled, define the total number of jobs that will be generated during the simulation
max_jobs = 1
# If inject_fixed_num_jobs is disabled, define the length of the simulation (in us)
simulation_length = 100000

# The core simulation engine tick with simulation clock (in us)
clock = 1

# The scheduler name
scheduler = RELIEF_BASE

# Injects a new job as soon as the previous job finished its execution
inject_jobs_asap     = no

# Sets a fixed injection rate (this is overwritten by the inject_jobs_asap config)
fixed_injection_rate = no

# Defines maximum number of jobs in the system at any point in time during simulation
max_jobs_in_parallel = 16

# The variable to control the random state for the job inter-arrival time
random_seed = 1

# Standard deviation for randomization of execution time
# as a percentage (0 => 1 of expected execution time)
standard_deviation = 0.0

[TRACE]
# Assign trace variables to be yes (or no) to save traces of the execution
clean_traces              = yes
trace_tasks               = no
trace_system              = no
trace_frequency           = no
trace_PEs                 = no
trace_IL_predictions      = no
trace_temperature         = no
trace_load                = no
create_dataset_DTPM       = no

# Trace file names
trace_file_tasks             = trace_tasks.csv
trace_file_system            = trace_system.csv
trace_file_frequency         = trace_frequency.csv
trace_file_PEs               = trace_PEs.csv
trace_file_temperature       = trace_temperature.csv
trace_file_temperature_workload = trace_temperature_workload.csv
trace_file_load              = trace_load.csv
results                      = results.csv

[POWER MANAGEMENT]
# Sampling rate for the DVFS mechanism
sampling_rate             = 10
sampling_rate_temperature = 20

# High and low thresholds for the ondemand mode
util_high_threshold = 0.8
util_low_threshold  = 0.3

# Thermal trip points configuration
enable_throttling       = no
trip_temperature        = [85, 90, 95]
trip_hysteresis         = [3, 3, 3]
enable_DTPM_throttling  = no
DTPM_trip_temperature   = [95, 100, 105]

# Coefficients for the leakage power model (Odroid XU3 board)
C1    = 0.002488
C2    = 2660
Igate = 0.000519
T_ambient = 42

[SIMULATION MODE]
# Choose the simulation mode, i.e., validation or performance
# In validation mode simulation runs until it finishes the total number of jobs
# In performance mode simulation runs until it reaches the simulation length
simulation_mode = performance

#### if validation is chosen, define the variables below
# The variable used to adjust the mean value of the job inter-arrival time
# scale variable equals to inverse of lambda in exponential distribution (scale = 1/lambda)
scale = 1

#### if performance is chosen, define the variables below
# warmup is the time period till which no result will be recorded
warmup_period = 0

# number of iteration to run for a given scale value (1/lambda)
num_of_iterations = 1

# list of scale values which will determine the job arrival rate under performance mode
# construct the list based on range() function in python
# start-stop-step
scale_values = 100

[COMMUNICATION MODE]
# The packet size (in bits)
packet_size = 256

# Note: choose either Pe_to_PE or shared_memory
# To use PE to PE communication, assign yes to the variable
PE_to_PE = yes
  
# To use a shared memory for the communication, assign yes to the variable
shared_memory = no

[DEBUG]
# Assign debug variables to be yes (or no) to check the flow of the simulation
debug_config = no
debug_sim = yes
debug_job = no
debug_sch = no

[INFO]
# Assign info variables to be yes (or no) get the information about the flow of the simulation
info_sim = no
info_job = yes
info_sch = no
